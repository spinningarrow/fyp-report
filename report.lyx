#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
\myTOC
\clearpage
\pagenumbering{arabic}
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

NANYANG TECHNOLOGICAL UNIVERSITY
\end_layout

\begin_layout Standard
\align center

\size huge
\begin_inset VSpace vfill
\end_inset

Developing of Innovative and Cool Mobile Applications on Google's Android
 Powered Devices
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Submitted in partial fulfillment of the requirements 
\begin_inset Newline newline
\end_inset

for the degree of Bachelor of Computer Engineering
\begin_inset Newline newline
\end_inset

 of Nanyang Technological University
\begin_inset VSpace vfill
\end_inset

by
\begin_inset Newline newline
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Sahil Bajaj
\begin_inset Newline newline
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
School of Computer Engineering
\end_layout

\begin_layout Standard
\align center
2014
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
Lorem ipsum dolor sit amet.
 U chebin estel amin.
 Elbereth, Gilthoniel, silivren penna miriel.
 O menel aglar elenath, na-chaered palan diriel.
\end_layout

\begin_layout Standard
We still remember, we who dwell in this far land beneath the trees, the
 starlight on the western seas.
\end_layout

\begin_layout Section*
Acknowledgements
\end_layout

\begin_layout Standard
I would like to thank the academy, the mystical pink unicorn and potatoes.
\end_layout

\begin_layout Standard
The Wheel of time turns and ages come and pass, leaving memories that become
 legend.
 Legend fades to myth and even myth is long forgotten when the age that
 gave it birth comes again.
 In one such age, an Age yet to come, an age long past; a wind rose in the
 mountains.
 The wind was not the beginning.
 There are neither beginnings nor endings to the turning of the Wheel of
 Time.
 But it was 
\emph on
a
\emph default
 beginning.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Background
\end_layout

\begin_layout Standard
lalalala
\end_layout

\begin_layout Subsection
Purpose and Scope
\end_layout

\begin_layout Standard
This purpose of this project is to design and develop an innovative mobile
 application for the Android platform.
\end_layout

\begin_layout Standard
The application scope chosen involves wireless communication between the
 Android device (mobile phone or tablet) and an Arduino device, using XBee
 (802.15.4).
\end_layout

\begin_layout Standard
The Android device needs to communicate with an Arduino board in order to
 send files or instructions wirelessly.
\end_layout

\begin_layout Standard
Since Arduino boards and Android devices support different wireless connection
 standards, an adaptor is required either for the Arduino board or the Android
 device.
 In this project, an XBee adaptor is used on the Android device so that
 the two interfaces communicate over the IEEE 802.15.4 wireless connection
 standard as shown in the figure below:
\end_layout

\begin_layout Standard
The application involves using this wireless set up of an Android device
 and Arduino device in conjunction with a server in order to perform 2-Factor
 Authentication between the devices and subsequently control or monitor
 the Arduino device from the Android application.
\end_layout

\begin_layout Subsection
Report Organisation
\end_layout

\begin_layout Standard
how this report is organised
\end_layout

\begin_layout Section
Review of Theory and Previous Work
\end_layout

\begin_layout Subsection
Previous Work
\end_layout

\begin_layout Standard
A basic application was previously created at I2R to communicate with Arduino
 boards from an Android device.
 This application is like a simpler, lighter version of the XCTU desktop
 software provided by Digi.
 It can write values to the attached XBee’s AT registers, detect Arduino
 nodes in the vicinity and sniff formatted packets broadcasted by these
 nodes.
 It cannot transmit any files to the nodes.
\end_layout

\begin_layout Subsection
Similar Applications
\end_layout

\begin_layout Standard
The following is a list of applications that do something similar to the
 proposed project; there are, however, differences in platforms, devices
 and protocols used.
\end_layout

\begin_layout Subsubsection
Nabto
\end_layout

\begin_layout Standard
Nabto aims at being a “simple solution for device vendors to offer easy
 remote access” as well as the “preferred communication” platform for the
 internet of things.
 It includes a web server interface for devices providing local and remote
 connectivity with optional central services including remote update and
 storage and logging abilities.
\end_layout

\begin_layout Standard
Supported devices include Raspberry Pi, Windows/Unix, Microchip PIC, Nabduino,
 Arduino (wired), etc.
 Nabto provides demos for these devices; however, most of them are prototypes
 using the proprietary uNabto Adapter and uNabto starter kit.
\end_layout

\begin_layout Standard
The web interface uses a custom protocol (nabto://).
 It is also available as an Android app, which is essentially a wrapper
 around the web interface.
\end_layout

\begin_layout Subsubsection
DaisyCentral and DaisyWorks Desktop
\end_layout

\begin_layout Standard
DaisyWorks, Inc.
 manufactures a device called the ‘Daisy’, an Arduino derivative with radio
 jacks, IrDA, SD card slots, and Bluetooth.
 This device can be used in conjunction with components called Daisy Petals
 – small, modular devices that add extra functionality like moisture/light/tempe
rature sensors, USB interface, and so on.
\end_layout

\begin_layout Standard
In order to communicate with the Daisy, there are two main applications
 provided: DaisyCentral, and DaisyWorks Desktop.
 The former is an Android application while the latter is a cross-platform
 desktop application, working on Windows, OSX (not tested on Lion and Mountain
 Lion), and Linux (Debian).
 These applications can wireless connect with the Bluetooth-enabled Daisy
 device and can be used to toggle switches or to update the firmware on
 the device.
\end_layout

\begin_layout Standard
In addition to the DaisyCentral Android application, DaisyWorks also provides
 two more Android applications: Daisy On/Off App, and Daisy Hygro Petal
 App.
\end_layout

\begin_layout Standard
These applications integrate with Petals to provide specific functionality
 (such as showing the status of the sensors in the case of the Daisy Hygro
 Petal App).
 DaisyWorks also has an App Store, inviting developers to create and submit
 applications written for the Daisy devices to the store so that other users
 may benefit from them.
 Currently, the App Store consists of 9 applications, all written by DaisyWorks.
\end_layout

\begin_layout Section
Resources and Costing
\end_layout

\begin_layout Standard
hello there
\end_layout

\begin_layout Section
Project Schedule
\end_layout

\begin_layout Standard
discuss something here
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
This section describes the design of the entire system: the Android application
 as well as its dependent components.
 The overall system architecture is explained, followed by a description
 of the entity relationships, use cases, and the user interface.
 Since the two-factor authentication backed security is a main component
 of the design of the system, a detailed description of its flow has been
 provided.
\end_layout

\begin_layout Subsection
System architecture
\end_layout

\begin_layout Standard
The entire system consists of four components: an Android mobile device,
 an Arduino sensor node, a server backend, and a local personal computer
 that polls the server.
\end_layout

\begin_layout Standard
The Android and Arduino devices, and the local machine have XBee modules
 attached to them to facilitate wireless communication using the 802.15.4
 protocol.
 In the case of the Android device and local machine, the XBee modules are
 connected via USB using an XBee Explorer Dongle.
 For the Arduino device, the XBee is connected using an XBee Shield.
\end_layout

\begin_layout Standard
The 
\series bold
Android mobile device
\series default
 contains is the main user-facing application, allowing communication with
 the nodes.
 It allows the user to log in, retrieve the authentication key for a particular
 node, establish a communication protocol with a node secured by two-factor
 authentication, and transfer files to the node.
\end_layout

\begin_layout Standard
The 
\series bold
Arduino node
\series default
 waits for requests from the mobile device and accordingly responds to the
 encrypted challenges and authentication requests.
\end_layout

\begin_layout Standard
The 
\series bold
server
\series default
 backend coordinates the two-factor authentication requests, generating
 tokens to be sent to the mobile device and specified node.
 It also stores the credentials and details of the various users who log
 in via the Android application.
\end_layout

\begin_layout Standard
The 
\series bold
local machine
\series default
 runs a small Java program that periodically polls the server, checking
 for any outstanding transmission requests.
 If it finds any, it relays these to the respective nodes via the XBee module
 attached to it.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:architecture"

\end_inset

 shows how the various components interact with each other.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/architecture-design.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
High-level architecture diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Two-Factor Authentication design
\end_layout

\begin_layout Standard
One of the main features of this application is security via two-factor
 authentication.
 This is enabled through an encrypted challenge request-response mechanism
 between the mobile device and the sensor node, followed by a comparison
 of authentication tokens sent to each device separately by the server.
\end_layout

\begin_layout Standard
The two-factor authentication flow has been designed with the following
 security features in mind:
\end_layout

\begin_layout Enumerate
The communication between the mobile device (Android) and the node (Arduino)
 uses 256-bit AES encryption
\end_layout

\begin_layout Enumerate
The server is secured using the HTTPS protocol over TLS 1.2
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:twofaflow"

\end_inset

 shows an overview of how this communication takes place.
 For the purpose of simplification, the server and local machine are shown
 as one component, since the purpose of the local machine is to relay messages
 back and forth between the server and the Arduino node.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/2fa-flow.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Two-factor authentication flow diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:twofaflow"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following steps describe the two-factor authentication process in greater
 detail:
\end_layout

\begin_layout Enumerate
User logs from their Android device to the backend server using their username/p
assword credentials
\end_layout

\begin_layout Enumerate
If login is successful, these credentials are stored by the application
\end_layout

\begin_layout Enumerate
User sends requests the server for the authentication key of the node it
 wants to communicate with
\end_layout

\begin_layout Enumerate
The server responds with the key if the node is valid
\end_layout

\begin_layout Enumerate
The mobile device sends a request to the node, encrypted with the key it
 received from the server
\end_layout

\begin_layout Enumerate
The node checks the request; if it is valid it requests the mobile device
 for the auth token
\end_layout

\begin_layout Enumerate
At the same time, the node informs the server that a 2FA request has been
 initiated by the mobile device
\end_layout

\begin_layout Enumerate
The mobile device also informs the server of the same
\end_layout

\begin_layout Enumerate
The server verifies this information and sends a 2FA code to both the node
 and the user
\end_layout

\begin_layout Enumerate
The user enters to 2FA code using the Android app
\end_layout

\begin_layout Enumerate
The mobile device sends this code to the Arduino node, which verifies it
 and sends a confirmation
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tfasequence"

\end_inset

 shows the sequence diagram for this procedure.
 After the authentication succeeds, the user may interact with the sensor
 node, e.g., by sending files to it for the purpose of this project.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/2fa-sequence.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequence of the two-factor authentication process
\begin_inset CommandInset label
LatexCommand label
name "fig:tfasequence"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Database Entity Relationship
\end_layout

\begin_layout Standard
The backend server performs various functions such as validating user logins,
 responding to requests for authentication keys for the various sensor nodes,
 generating authentication tokens, and coordinating the requests between
 the mobile devices and sensor nodes.
 To achieve these tasks, it needs to store various data, which it does in
 the form of a simple database.
\end_layout

\begin_layout Standard
The database contains the following entities and fields:
\end_layout

\begin_layout Enumerate

\series bold
Users
\series default
: A collection of the users registered in the system.
 It contains fields such as usernames, passwords, and email addresses.
 It is primarily used when a user wishes to log in to the system.
\end_layout

\begin_layout Enumerate

\series bold
Nodes
\series default
: A list of the nodes and their authentication keys.
\end_layout

\begin_layout Enumerate

\series bold
Transmissions
\series default
: Whenever the server is asked to generate a new two-factor authentication
 token, it creates one and sends it to the mobile device.
 It also needs to send the same token to the sensor node so that the node
 may compare the token it receives from the mobile device.
 In order to do this, it stores the generated token along with the node
 identifier, an identifier for the device that requested the token, and
 the time of the request in this collection.
 This data is then requested by the local machine periodically and any outstandi
ng requests are transmitted to the respective sensor nodes.
\end_layout

\begin_layout Standard
The 
\series bold
nodes
\series default
 and 
\series bold
transmissions
\series default
 entities are related: a node may contain multiple transmission requests,
 however a single transmission request can be for only one particular node.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/er-diagram.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Database ER diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Database-ER-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Database-ER-diagram"

\end_inset

 shows this entity relationship in the form of a diagram.
\end_layout

\begin_layout Subsection
Use Cases for the Android Application
\end_layout

\begin_layout Standard
Use case diagrams
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Use-case-diagram"

\end_inset

 shows the use cases.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/use-case.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use case diagram for the Android application
\begin_inset CommandInset label
LatexCommand label
name "fig:Use-case-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Android application has several high level use cases.
\end_layout

\begin_layout Subsection
User Interface Flow
\end_layout

\begin_layout Standard
UI flow diagram.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/ui-flow.png
	lyxscale 25
	width 100line%
	groupId CenterFull

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
User interface flow diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:User-interface-flow"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:User-interface-flow"

\end_inset

 shows the basic UI flow for the Android application.
\end_layout

\begin_layout Subsection
Data Flow diagrams
\end_layout

\begin_layout Standard
Flow of data between stuff
\end_layout

\begin_layout Section
Implementation Details
\end_layout

\begin_layout Standard
how it is implemented, technologies used
\end_layout

\begin_layout Subsection
Software Used
\end_layout

\begin_layout Standard
details of software used
\end_layout

\begin_layout Subsection
Android application
\end_layout

\begin_layout Standard
that's how
\end_layout

\begin_layout Subsection
Arduino application
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Subsection
Polling component
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Standard
how it is tested
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
discuss
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
conclude something here
\end_layout

\begin_layout Section
Recommendations
\end_layout

\begin_layout Standard
recommend something
\end_layout

\begin_layout Section*
References
\end_layout

\begin_layout Standard
references go here
\end_layout

\end_body
\end_document
