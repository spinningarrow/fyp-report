#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

NANYANG TECHNOLOGICAL UNIVERSITY
\end_layout

\begin_layout Standard
\align center

\size huge
\begin_inset VSpace vfill
\end_inset

Developing of Innovative and Cool Mobile Applications on Google's Android
 Powered Devices
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Submitted in partial fulfillment of the requirements 
\begin_inset Newline newline
\end_inset

for the degree of Bachelor of Computer Engineering
\begin_inset Newline newline
\end_inset

 of Nanyang Technological University
\begin_inset VSpace vfill
\end_inset

by
\begin_inset Newline newline
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Sahil Bajaj
\begin_inset Newline newline
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
School of Computer Engineering
\end_layout

\begin_layout Standard
\align center
2014
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
this is an abstract
\end_layout

\begin_layout Standard
Something else goes here.
\end_layout

\begin_layout Standard
eh?
\end_layout

\begin_layout Standard
What is going on?
\end_layout

\begin_layout Standard
Interesting.
\end_layout

\begin_layout Standard
How do I start a new paragraph?
\begin_inset Newline newline
\end_inset

Ah, that is how.
 Okay, got it.
\end_layout

\begin_layout Section*
Acknowledgements
\end_layout

\begin_layout Standard
I would like to thank 
\end_layout

\begin_layout Standard
you
\end_layout

\begin_layout Standard
you
\end_layout

\begin_layout Standard
you
\end_layout

\begin_layout Standard
and you
\end_layout

\begin_layout Section*
Table of Contents
\end_layout

\begin_layout Standard
Here are the contents
\end_layout

\begin_layout Section*
List of Figures
\end_layout

\begin_layout Standard
Some figures
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Background
\end_layout

\begin_layout Standard
lalalala
\end_layout

\begin_layout Subsection
Purpose and Scope
\end_layout

\begin_layout Standard
This purpose of this project is to design and develop an innovative mobile
 application for the Android platform.
\end_layout

\begin_layout Standard
The application scope chosen involves wireless communication between the
 Android device (mobile phone or tablet) and an Arduino device, using XBee
 (802.15.4).
\end_layout

\begin_layout Standard
The Android device needs to communicate with an Arduino board in order to
 send files or instructions wirelessly.
\end_layout

\begin_layout Standard
Since Arduino boards and Android devices support different wireless connection
 standards, an adaptor is required either for the Arduino board or the Android
 device.
 In this project, an XBee adaptor is used on the Android device so that
 the two interfaces communicate over the IEEE 802.15.4 wireless connection
 standard as shown in the figure below:
\end_layout

\begin_layout Standard
The application involves using this wireless set up of an Android device
 and Arduino device in conjunction with a server in order to perform 2-Factor
 Authentication between the devices and subsequently control or monitor
 the Arduino device from the Android application.
\end_layout

\begin_layout Subsection
Report Organisation
\end_layout

\begin_layout Standard
how this report is organised
\end_layout

\begin_layout Section
Review of Theory and Previous Work
\end_layout

\begin_layout Subsection
Previous Work
\end_layout

\begin_layout Standard
A basic application was previously created at I2R to communicate with Arduino
 boards from an Android device.
 This application is like a simpler, lighter version of the XCTU desktop
 software provided by Digi.
 It can write values to the attached XBee’s AT registers, detect Arduino
 nodes in the vicinity and sniff formatted packets broadcasted by these
 nodes.
 It cannot transmit any files to the nodes.
\end_layout

\begin_layout Subsection
Similar Applications
\end_layout

\begin_layout Standard
The following is a list of applications that do something similar to the
 proposed project; there are, however, differences in platforms, devices
 and protocols used.
\end_layout

\begin_layout Subsubsection
Nabto
\end_layout

\begin_layout Standard
Nabto aims at being a “simple solution for device vendors to offer easy
 remote access” as well as the “preferred communication” platform for the
 internet of things.
 It includes a web server interface for devices providing local and remote
 connectivity with optional central services including remote update and
 storage and logging abilities.
\end_layout

\begin_layout Standard
Supported devices include Raspberry Pi, Windows/Unix, Microchip PIC, Nabduino,
 Arduino (wired), etc.
 Nabto provides demos for these devices; however, most of them are prototypes
 using the proprietary uNabto Adapter and uNabto starter kit.
\end_layout

\begin_layout Standard
The web interface uses a custom protocol (nabto://).
 It is also available as an Android app, which is essentially a wrapper
 around the web interface.
\end_layout

\begin_layout Subsubsection
DaisyCentral and DaisyWorks Desktop
\end_layout

\begin_layout Standard
DaisyWorks, Inc.
 manufactures a device called the ‘Daisy’, an Arduino derivative with radio
 jacks, IrDA, SD card slots, and Bluetooth.
 This device can be used in conjunction with components called Daisy Petals
 – small, modular devices that add extra functionality like moisture/light/tempe
rature sensors, USB interface, and so on.
\end_layout

\begin_layout Standard
In order to communicate with the Daisy, there are two main applications
 provided: DaisyCentral, and DaisyWorks Desktop.
 The former is an Android application while the latter is a cross-platform
 desktop application, working on Windows, OSX (not tested on Lion and Mountain
 Lion), and Linux (Debian).
 These applications can wireless connect with the Bluetooth-enabled Daisy
 device and can be used to toggle switches or to update the firmware on
 the device.
\end_layout

\begin_layout Standard
In addition to the DaisyCentral Android application, DaisyWorks also provides
 two more Android applications: Daisy On/Off App, and Daisy Hygro Petal
 App.
\end_layout

\begin_layout Standard
These applications integrate with Petals to provide specific functionality
 (such as showing the status of the sensors in the case of the Daisy Hygro
 Petal App).
 DaisyWorks also has an App Store, inviting developers to create and submit
 applications written for the Daisy devices to the store so that other users
 may benefit from them.
 Currently, the App Store consists of 9 applications, all written by DaisyWorks.
\end_layout

\begin_layout Section
Resources and Costing
\end_layout

\begin_layout Standard
hello there
\end_layout

\begin_layout Section
Project Schedule
\end_layout

\begin_layout Standard
discuss something here
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
how this is all designed
\end_layout

\begin_layout Subsection
System architecture
\end_layout

\begin_layout Standard
The entire system consists of four components: an Android mobile device,
 an Arduino device node, a server backend, and a local personal computer
 that polls the server.
\end_layout

\begin_layout Standard
The Android and Arduino devices, along with the local machine, have XBee
 modules attached to them to facilitate wireless communication using the
 802.15.4 protocol.
 In the case of the Android device and local machine, the XBee modules are
 connected via USB using an XBee Explorer Dongle.
 For the Arduino device, the XBee is connected using an XBee Shield.
\end_layout

\begin_layout Standard
The 
\series bold
Android mobile device
\series default
 contains is the main user-facing application, allowing communication with
 the nodes.
 It allows the user to log in, retrieve the authentication key for a particular
 node, establish a communication protocol with a node secured by two-factor
 authentication, and transfer files to the node.
\end_layout

\begin_layout Standard
The 
\series bold
Arduino node
\series default
 waits for requests from the mobile device and acts accordingly.
\end_layout

\begin_layout Standard
The 
\series bold
server
\series default
 backend coordinates the two-factor authentication requests, generating
 tokens to be sent to the mobile device and specified node.
\end_layout

\begin_layout Standard
The 
\series bold
local machine
\series default
 runs a simple Java program that periodically polls the server, checking
 for any outstanding transmission requests.
 If it finds any, it relays these to the respective nodes via the XBee module
 attached to it.
\end_layout

\begin_layout Standard
The following diagram shows how the various components interact with each
 other:
\end_layout

\begin_layout Standard
Use Case diagrams
\end_layout

\begin_layout Standard
Sequence diagrams
\end_layout

\begin_layout Standard
Data Flow diagrams
\end_layout

\begin_layout Standard
UI Flow for Android application
\end_layout

\begin_layout Standard
2FA flow
\end_layout

\begin_layout Standard
ER diagram
\end_layout

\begin_layout Standard
Technologies Used
\end_layout

\begin_layout Standard
Software Used
\end_layout

\begin_layout Section
Implementation Details
\end_layout

\begin_layout Standard
how it is implemented
\end_layout

\begin_layout Subsection
Software Used
\end_layout

\begin_layout Standard
details of software used
\end_layout

\begin_layout Subsection
Android application
\end_layout

\begin_layout Standard
that's how
\end_layout

\begin_layout Subsection
Arduino application
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Subsection
Polling component
\end_layout

\begin_layout Standard
and that
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Standard
how it is tested
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
discuss
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
conclude something here
\end_layout

\begin_layout Section
Recommendations
\end_layout

\begin_layout Standard
recommend something
\end_layout

\begin_layout Section*
References
\end_layout

\begin_layout Standard
references go here
\end_layout

\end_body
\end_document
